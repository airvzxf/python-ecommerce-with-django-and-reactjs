-- MySQL Script generated by MySQL Workbench
-- Fri 01 Mar 2019 02:48:26 AM CST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema python_ecommerce
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `python_ecommerce` ;

-- -----------------------------------------------------
-- Schema python_ecommerce
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `python_ecommerce` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;
SHOW WARNINGS;
USE `python_ecommerce` ;

-- -----------------------------------------------------
-- Table `python_ecommerce`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`customer` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`customer` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

SHOW WARNINGS;
CREATE UNIQUE INDEX `email_UNIQUE` ON `python_ecommerce`.`customer` (`email` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `python_ecommerce`.`product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`product` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`product` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `price` DECIMAL(10,2) UNSIGNED NOT NULL,
  `sku` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

SHOW WARNINGS;
CREATE UNIQUE INDEX `sku_UNIQUE` ON `python_ecommerce`.`product` (`sku` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `python_ecommerce`.`orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`orders` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`orders` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `customer_id` INT UNSIGNED NOT NULL,
  `utc_date` DATETIME NULL,
  `total` DECIMAL(20,2) NULL DEFAULT 0,
  PRIMARY KEY (`id`, `customer_id`),
  CONSTRAINT `fk_orders_with_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `python_ecommerce`.`customer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

SHOW WARNINGS;
CREATE INDEX `fk_orders_with_customer_idx` ON `python_ecommerce`.`orders` (`customer_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `python_ecommerce`.`orders_detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`orders_detail` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`orders_detail` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `orders_id` INT UNSIGNED NOT NULL,
  `product_id` INT UNSIGNED NOT NULL,
  `price` DECIMAL(20,2) UNSIGNED NULL,
  `quantity` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`, `orders_id`, `product_id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

SHOW WARNINGS;
CREATE INDEX `fk_orders_detail_with_orders_idx` ON `python_ecommerce`.`orders_detail` (`orders_id` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_orders_detail_with_product_idx` ON `python_ecommerce`.`orders_detail` (`product_id` ASC) VISIBLE;

SHOW WARNINGS;
USE `python_ecommerce` ;

-- -----------------------------------------------------
-- Placeholder table for view `python_ecommerce`.`customer_orders_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`customer_orders_view` (`id` INT, `last_name` INT, `first_name` INT, `sum_total` INT);
SHOW WARNINGS;

-- -----------------------------------------------------
-- Placeholder table for view `python_ecommerce`.`orders_total_by_customer_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `python_ecommerce`.`orders_total_by_customer_view` (`customer_id` INT, `sum_total` INT);
SHOW WARNINGS;

-- -----------------------------------------------------
-- View `python_ecommerce`.`customer_orders_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`customer_orders_view`;
SHOW WARNINGS;
DROP VIEW IF EXISTS `python_ecommerce`.`customer_orders_view` ;
SHOW WARNINGS;
USE `python_ecommerce`;
CREATE  OR REPLACE VIEW `customer_orders_view` AS
SELECT
    customer.id AS id,
    customer.last_name AS last_name,
    customer.first_name AS first_name,
    orders_total_by_customer_view.sum_total
FROM
    customer
LEFT JOIN
    orders_total_by_customer_view
    ON customer.id = orders_total_by_customer_view.customer_id
GROUP BY
    customer.id;
SHOW WARNINGS;

-- -----------------------------------------------------
-- View `python_ecommerce`.`orders_total_by_customer_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `python_ecommerce`.`orders_total_by_customer_view`;
SHOW WARNINGS;
DROP VIEW IF EXISTS `python_ecommerce`.`orders_total_by_customer_view` ;
SHOW WARNINGS;
USE `python_ecommerce`;
CREATE  OR REPLACE VIEW `orders_total_by_customer_view` AS
SELECT
    orders.customer_id,
    SUM(orders.total) AS sum_total
FROM
    orders
GROUP BY
    orders.customer_id;
SHOW WARNINGS;
USE `python_ecommerce`;

DELIMITER $$

USE `python_ecommerce`$$
DROP TRIGGER IF EXISTS `python_ecommerce`.`orders_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `python_ecommerce`$$
CREATE DEFINER = CURRENT_USER TRIGGER `python_ecommerce`.`orders_BEFORE_INSERT` BEFORE INSERT ON `orders` FOR EACH ROW
BEGIN
SET NEW.utc_date = utc_timestamp();
END$$

SHOW WARNINGS$$

USE `python_ecommerce`$$
DROP TRIGGER IF EXISTS `python_ecommerce`.`orders_detail_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `python_ecommerce`$$
CREATE DEFINER = CURRENT_USER TRIGGER `python_ecommerce`.`orders_detail_BEFORE_INSERT` BEFORE INSERT ON `orders_detail` FOR EACH ROW
BEGIN
SET NEW.price = (SELECT product.price FROM product WHERE product.id = NEW.product_id);
END$$

SHOW WARNINGS$$

USE `python_ecommerce`$$
DROP TRIGGER IF EXISTS `python_ecommerce`.`orders_detail_AFTER_INSERT` $$
SHOW WARNINGS$$
USE `python_ecommerce`$$
CREATE DEFINER = CURRENT_USER TRIGGER `python_ecommerce`.`orders_detail_AFTER_INSERT` AFTER INSERT ON `orders_detail` FOR EACH ROW
BEGIN
UPDATE
    orders
SET
    orders.total = (
        SELECT
            sum(orders_detail.price * orders_detail.quantity)
        FROM
            orders_detail
        WHERE
            orders_detail.orders_id = NEW.orders_id
    )
WHERE
    orders.id = NEW.orders_id
;
END$$

SHOW WARNINGS$$

DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS dev_user;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
SHOW WARNINGS;
CREATE USER 'dev_user' IDENTIFIED BY '111';

GRANT ALL ON `python_ecommerce`.* TO 'dev_user';
GRANT SELECT ON TABLE `python_ecommerce`.* TO 'dev_user';
GRANT SELECT, INSERT, TRIGGER ON TABLE `python_ecommerce`.* TO 'dev_user';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `python_ecommerce`.* TO 'dev_user';
SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `python_ecommerce`.`customer`
-- -----------------------------------------------------
START TRANSACTION;
USE `python_ecommerce`;
INSERT INTO `python_ecommerce`.`customer` (`id`, `first_name`, `last_name`, `email`) VALUES (1, 'Ken üëªÔ∏è', 'Rogers', 'k.rogers@gmail.com');
INSERT INTO `python_ecommerce`.`customer` (`id`, `first_name`, `last_name`, `email`) VALUES (2, 'Julia üí©Ô∏è', 'Blacksmith', 'flowers.3292@hotmail.com');
INSERT INTO `python_ecommerce`.`customer` (`id`, `first_name`, `last_name`, `email`) VALUES (3, 'Al üâêÔ∏è', 'Yenzi', 'ayenzi@businessenterprice.net');
INSERT INTO `python_ecommerce`.`customer` (`id`, `first_name`, `last_name`, `email`) VALUES (4, 'Alfonso üé•Ô∏è', 'Kukult', 'akukult@yahoo.com.mx');

COMMIT;


-- -----------------------------------------------------
-- Data for table `python_ecommerce`.`product`
-- -----------------------------------------------------
START TRANSACTION;
USE `python_ecommerce`;
INSERT INTO `python_ecommerce`.`product` (`id`, `name`, `price`, `sku`) VALUES (1, 'Glass', 50, 'PEC01G0981292');
INSERT INTO `python_ecommerce`.`product` (`id`, `name`, `price`, `sku`) VALUES (2, 'Wood', 10, 'PEC01G7392982');
INSERT INTO `python_ecommerce`.`product` (`id`, `name`, `price`, `sku`) VALUES (3, 'Metal', 30, 'PEC01G8739833');
INSERT INTO `python_ecommerce`.`product` (`id`, `name`, `price`, `sku`) VALUES (4, 'Metal Mate', 25, 'PEC01G9873848');
INSERT INTO `python_ecommerce`.`product` (`id`, `name`, `price`, `sku`) VALUES (5, 'Crystal', 82, 'PEC01G8375928');

COMMIT;


-- -----------------------------------------------------
-- Data for table `python_ecommerce`.`orders`
-- -----------------------------------------------------
START TRANSACTION;
USE `python_ecommerce`;
INSERT INTO `python_ecommerce`.`orders` (`id`, `customer_id`, `utc_date`, `total`) VALUES (1, 1, '2018-03-01 10:32:46.336148', 200.00);
INSERT INTO `python_ecommerce`.`orders` (`id`, `customer_id`, `utc_date`, `total`) VALUES (2, 3, '2018-08-02 08:53:14.395756', 182.00);
INSERT INTO `python_ecommerce`.`orders` (`id`, `customer_id`, `utc_date`, `total`) VALUES (3, 2, '2018-11-24 21:38:51.873928', 3000.00);
INSERT INTO `python_ecommerce`.`orders` (`id`, `customer_id`, `utc_date`, `total`) VALUES (4, 1, '2019-04-13 16:26:19.786383', 110.00);
INSERT INTO `python_ecommerce`.`orders` (`id`, `customer_id`, `utc_date`, `total`) VALUES (5, 4, '2019-01-21 00:18:40.982738', 388.74);

COMMIT;


-- -----------------------------------------------------
-- Data for table `python_ecommerce`.`orders_detail`
-- -----------------------------------------------------
START TRANSACTION;
USE `python_ecommerce`;
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (1, 1, 1, 50, 2);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (2, 1, 3, 30, 3);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (3, 1, 2, 10, 1);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (4, 2, 5, 82, 1);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (5, 2, 1, 50, 2);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (6, 3, 4, 15, 200);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (7, 4, 3, 30, 2);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (8, 4, 1, 50, 1);
INSERT INTO `python_ecommerce`.`orders_detail` (`id`, `orders_id`, `product_id`, `price`, `quantity`) VALUES (9, 5, 2, 10.23, 38);

COMMIT;

